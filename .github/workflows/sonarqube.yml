name: SonarQube Analysis

on:
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  pull-requests: write # Allows SonarQube to decorate PRs with analysis results

jobs:
  analysis:
    runs-on: ubuntu-latest

    steps:
      # Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # Verify Java version
      - name: Verify Java version
        run: java -version

      # Clear cache (if applicable)
      - name: Clear SonarQube cache
        run: rm -rf ~/.sonar/cache || true

      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Download and set up SonarScanner
      - name: Download and set up SonarScanner
        run: |
          wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.7.0.2747-linux.zip
          unzip sonar-scanner-cli-4.7.0.2747-linux.zip
          export PATH=$PATH:$PWD/sonar-scanner-4.7.0.2747-linux/bin
          echo "PATH=$PATH" # Verify that SonarScanner is in PATH

      # Run SonarScanner directly
      - name: Run SonarScanner
        run: |
          sonar-scanner \
            -Dsonar.projectKey=jp1593_spectra-systems_c173bdfd-beff-4caf-97cf-85378b44707c \
            -Dsonar.projectName='spectra-systems' \
            -Dsonar.sources=src \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

      # Optional: Upload analysis results as artifacts (for debugging)
      - name: Upload SonarQube Analysis Results
        if: always() # Ensure this runs even if previous steps fail
        uses: actions/upload-artifact@v3
        with:
          name: sonar-analysis-results
          path: $HOME/.sonar/cache
